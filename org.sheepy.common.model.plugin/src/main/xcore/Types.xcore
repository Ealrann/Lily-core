@GenModel(modelDirectory="/org.sheepy.common.model.plugin/src/generated/java")
@GenModel(editDirectory="/org.sheepy.common.model.plugin.edit/src/generated/java")
@GenModel(publicConstructors="true")
@GenModel(updateClasspath="false")

package org.sheepy.common.model.types

import org.sheepy.common.model.util.types.SVector2f
import org.sheepy.common.model.util.types.SVector2i


//class PositionObject
//{
//	SVector2i position = "0;0"
//}

//class PositionFObject
//{
//	SVector2i position = "0;0"
//}

type SVector2f wraps SVector2f
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 2)
		{
			return new SVector2f(Float.valueOf(split.get(0)), Float.valueOf(split.get(1)))
		}
	}
	return new SVector2f(0, 0)
}
convert
{
	it.x + ";" + it.y
}

interface LNamedElement
{
	String name
}

//abstract class LShape

// ===================
// Parameter
// ===================

interface Parameter
{
}

interface PositionParameter extends Parameter
{
	op SVector2i getPosition()
}

interface PositionFParameter extends Parameter
{
	op SVector2f getPosition()
}

interface NativeParameter<T> extends Parameter
{
	op T getNativeValue()
}

class FloatParameter extends NativeParameter<Float>
{
	Float value
	
	op Float getNativeValue()
	{
		value
	}
}

class StringParameter extends NativeParameter<String>
{
	String value
	
	op String getNativeValue()
	{
		value
	}
}

class BooleanParameter extends NativeParameter<Boolean>
{
	Boolean value
	
	op Boolean getNativeValue()
	{
		value
	}
}


type SVector2i wraps SVector2i
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 2)
		{
			return new SVector2i(Integer.valueOf(split.get(0)), Integer.valueOf(split.get(1)))
		}
	}
	return new SVector2i(0, 0)
}
convert
{
	it.x + ";" + it.y
}

// =====================
// Enum
// =====================
enum ENotificationDirection
{
	Parent
	Children
	Self
	All
}

enum EMoveState
{
	START_MOVING
	STOP_MOVING
}

enum EDirection
{
	UP
	LEFT
	RIGHT
	DOWN
}

enum ETimeUnit
{
	MILLISECOND
	SECOND
	MINUTE
	HOUR
}

enum ENumberComparisonType
{
	Equal
	InfOrEqual
	SupOrEqual
	Inf
	Sup
}

enum EVerticalRelative
{
	BOTTOM
	MIDDLE
	TOP
}

enum EHorizontalRelative
{
	LEFT
	MIDDLE
	RIGHT
}

enum EMouseButton {
	RIGHT = 0
	LEFT = 1
	MIDDLE = 2
}

enum EKeyState {
	PRESSED = 0
	RELEASED = 1
}