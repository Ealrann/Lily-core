/**
 */
package org.sheepy.lily.core.model.variable.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.sheepy.lily.core.model.resource.provider.LilyEditPlugin;
import org.sheepy.lily.core.model.variable.VariablePackage;

import org.sheepy.lily.core.model.variable.util.VariableAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VariableItemProviderAdapterFactory extends VariableAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(LilyEditPlugin.INSTANCE, VariablePackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VariableItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.ChainVariableResolver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainVariableResolverItemProvider chainVariableResolverItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.ChainVariableResolver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainVariableResolverAdapter()
	{
		if (chainVariableResolverItemProvider == null)
		{
			chainVariableResolverItemProvider = new ChainVariableResolverItemProvider(this);
		}

		return chainVariableResolverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.ChainResolver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainResolverItemProvider chainResolverItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.ChainResolver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainResolverAdapter()
	{
		if (chainResolverItemProvider == null)
		{
			chainResolverItemProvider = new ChainResolverItemProvider(this);
		}

		return chainResolverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.DirectVariableResolver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectVariableResolverItemProvider directVariableResolverItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.DirectVariableResolver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectVariableResolverAdapter()
	{
		if (directVariableResolverItemProvider == null)
		{
			directVariableResolverItemProvider = new DirectVariableResolverItemProvider(this);
		}

		return directVariableResolverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.BooleanChangeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanChangeActionItemProvider booleanChangeActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.BooleanChangeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanChangeActionAdapter()
	{
		if (booleanChangeActionItemProvider == null)
		{
			booleanChangeActionItemProvider = new BooleanChangeActionItemProvider(this);
		}

		return booleanChangeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.IntChangeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntChangeActionItemProvider intChangeActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.IntChangeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntChangeActionAdapter()
	{
		if (intChangeActionItemProvider == null)
		{
			intChangeActionItemProvider = new IntChangeActionItemProvider(this);
		}

		return intChangeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.VarChangeActionPkg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarChangeActionPkgItemProvider varChangeActionPkgItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.VarChangeActionPkg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarChangeActionPkgAdapter()
	{
		if (varChangeActionPkgItemProvider == null)
		{
			varChangeActionPkgItemProvider = new VarChangeActionPkgItemProvider(this);
		}

		return varChangeActionPkgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.ModelVariablePkg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelVariablePkgItemProvider modelVariablePkgItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.ModelVariablePkg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelVariablePkgAdapter()
	{
		if (modelVariablePkgItemProvider == null)
		{
			modelVariablePkgItemProvider = new ModelVariablePkgItemProvider(this);
		}

		return modelVariablePkgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.IntVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntVariableItemProvider intVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.IntVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntVariableAdapter()
	{
		if (intVariableItemProvider == null)
		{
			intVariableItemProvider = new IntVariableItemProvider(this);
		}

		return intVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.FloatVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatVariableItemProvider floatVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.FloatVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatVariableAdapter()
	{
		if (floatVariableItemProvider == null)
		{
			floatVariableItemProvider = new FloatVariableItemProvider(this);
		}

		return floatVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.Vector3fVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Vector3fVariableItemProvider vector3fVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.Vector3fVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVector3fVariableAdapter()
	{
		if (vector3fVariableItemProvider == null)
		{
			vector3fVariableItemProvider = new Vector3fVariableItemProvider(this);
		}

		return vector3fVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.DurationVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DurationVariableItemProvider durationVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.DurationVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDurationVariableAdapter()
	{
		if (durationVariableItemProvider == null)
		{
			durationVariableItemProvider = new DurationVariableItemProvider(this);
		}

		return durationVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sheepy.lily.core.model.variable.SetVariableAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetVariableActionItemProvider setVariableActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.sheepy.lily.core.model.variable.SetVariableAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetVariableActionAdapter()
	{
		if (setVariableActionItemProvider == null)
		{
			setVariableActionItemProvider = new SetVariableActionItemProvider(this);
		}

		return setVariableActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders()
	{
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
	{
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator()
	{
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose()
	{
		if (chainVariableResolverItemProvider != null) chainVariableResolverItemProvider.dispose();
		if (chainResolverItemProvider != null) chainResolverItemProvider.dispose();
		if (directVariableResolverItemProvider != null) directVariableResolverItemProvider.dispose();
		if (booleanChangeActionItemProvider != null) booleanChangeActionItemProvider.dispose();
		if (intChangeActionItemProvider != null) intChangeActionItemProvider.dispose();
		if (varChangeActionPkgItemProvider != null) varChangeActionPkgItemProvider.dispose();
		if (modelVariablePkgItemProvider != null) modelVariablePkgItemProvider.dispose();
		if (intVariableItemProvider != null) intVariableItemProvider.dispose();
		if (floatVariableItemProvider != null) floatVariableItemProvider.dispose();
		if (vector3fVariableItemProvider != null) vector3fVariableItemProvider.dispose();
		if (durationVariableItemProvider != null) durationVariableItemProvider.dispose();
		if (setVariableActionItemProvider != null) setVariableActionItemProvider.dispose();
	}

}
