@GenModel(modelDirectory="/org.sheepy.lily.core.model/src/generated/java")
@GenModel(editDirectory="/org.sheepy.lily.core.model.edit/src/generated/java")
@GenModel(complianceLevel="11.0", resource="XMI")
@GenModel(extensibleProviderFactory="true")
@GenModel(updateClasspath="false")

package org.sheepy.lily.core.model.inference

import org.sheepy.lily.core.model.action.Action
import org.sheepy.lily.core.model.types.Parameter

interface IInferenceObject
{
	// InferenceObject will look/send notifications on this object
	op IInferenceObject lInferenceObject()
	{
		this
	}
}

/**
 * An Inferer takes "decisions" regarding its rules, and launch Actions on the executor.
 */
abstract class Inferer extends IInferenceObject
{
	@GenModel(createChild="false")
	contains LRule[] rules
	
	// Will execute actions on this Inferer
	op IInferenceObject lExecutor()
	{
		this
	}
}

/**
 * A Sensor generate notifications for the NotifiedObject
 */
abstract class Sensor extends IInferenceObject 
{
}

// ===================
// Rule
// ===================
class LRule
{
	contains AbstractNotification notification
	refers Action action
	contains Condition<?>[] conditions
}

// ===================
// Notification
// ===================

abstract class AbstractNotification
{	
	// Can be overrided
	op boolean match(AbstractNotification compareTo) {
		eClass.equals(compareTo.eClass)
	}
}

abstract class LNotification extends AbstractNotification
{
}

abstract class ParameteredNotification<T extends Parameter> extends AbstractNotification
{
}

// ===================
// Condition
// ===================

interface Condition<T extends Parameter>
{
	contains T value

	refers LNotification definition
	
	// Must be overided
	op Class<T> getType()
	{
		throw new UnsupportedOperationException
	}
	
	// Must be overided
	op boolean match(T compareTo) {
		throw new UnsupportedOperationException
	}
}