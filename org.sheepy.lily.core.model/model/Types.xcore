@GenModel(modelDirectory="/org.sheepy.lily.core.model/src/generated/java")
@GenModel(editDirectory="/org.sheepy.lily.core.model.edit/src/generated/java")
@GenModel(publicConstructors="true", complianceLevel="11.0", resource="XMI")
@GenModel(updateClasspath="false")
package org.sheepy.lily.core.model.types

import org.joml.Vector2f
import org.joml.Vector2i
import org.joml.Vector3f
import org.joml.Vector3i
import org.joml.Vector4f

interface LNamedElement
{
	String name
}

type Vector4f wraps Vector4f
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 4)
		{
			return new Vector4f(Float.valueOf(split.get(0)), Float.valueOf(split.get(1)),
				Float.valueOf(split.get(2)), Float.valueOf(split.get(3)))
		}
	}
	return new Vector4f(0, 0, 0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y + ";" + it.z + ";" + it.w
	else
		return "0;0;0;0"
}

type Color4f wraps Vector4f
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 4)
		{
			return new Vector4f(Float.valueOf(split.get(0)), Float.valueOf(split.get(1)),
				Float.valueOf(split.get(2)), Float.valueOf(split.get(3)))
		}
	}
	return new Vector4f(0, 0, 0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y + ";" + it.z + ";" + it.w
	else
		return "0;0;0;0"
}

type Color3f wraps Vector3f
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 3)
		{
			return new Vector3f(Float.valueOf(split.get(0)), Float.valueOf(split.get(1)),
				Float.valueOf(split.get(2)))
		}
	}
	return new Vector3f(0, 0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y + ";" + it.z
	else
		return "0;0;0"
}

type Vector3f wraps Vector3f
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 3)
		{
			return new Vector3f(Float.valueOf(split.get(0)), Float.valueOf(split.get(1)),
				Float.valueOf(split.get(2)))
		}
	}
	return new Vector3f(0, 0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y + ";" + it.z
	else
		return "0;0;0"
}

type Vector3i wraps Vector3i
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 3)
		{
			return new Vector3i(Integer.valueOf(split.get(0)), Integer.valueOf(split.get(1)),
				Integer.valueOf(split.get(2)))
		}
	}
	return new Vector3i(0, 0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y + ";" + it.z
	else
		return "0;0;0"
}

type Vector2f wraps Vector2f
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 2)
		{
			return new Vector2f(Float.valueOf(split.get(0)), Float.valueOf(split.get(1)))
		}
	}
	return new Vector2f(0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y
	else
		return "0;0"
}

type Vector2i wraps Vector2i
create
{
	if(it !== null)
	{
		val String[] split = it.split(";")
		if(split.length == 2)
		{
			return new Vector2i(Integer.valueOf(split.get(0)), Integer.valueOf(split.get(1)))
		}
	}
	return new Vector2i(0, 0)
}
convert
{
	if (it !== null)
		return it.x + ";" + it.y
	else
		return "0;0"
}

// ===================
// Parameter
// ===================
interface Parameter
{
}

interface PositionParameter extends Parameter
{
	op Vector2i getPosition()
}

interface PositionFParameter extends Parameter
{
	op Vector2f getPosition()
}

interface NativeParameter<T> extends Parameter
{
	op T getNativeValue()
}

class FloatParameter extends NativeParameter<Float>
{
	Float value
	op Float getNativeValue() {
		value
	}
}

class StringParameter extends NativeParameter<String>
{
	String value
	op String getNativeValue() {
		value
	}
}

class BooleanParameter extends NativeParameter<Boolean>
{
	Boolean value
	op Boolean getNativeValue() {
		value
	}
}

// =====================
// Enum
// =====================
enum ENotificationDirection
{
	Parent
	Children
	Self
	All
}

enum EMoveState
{
	START_MOVING
	STOP_MOVING
}

enum EDirection
{
	UP
	LEFT
	RIGHT
	DOWN
}

enum ETimeUnit
{
	MILLISECOND
	SECOND
	MINUTE
	HOUR
}

enum ENumberComparisonType
{
	Equal
	InfOrEqual
	SupOrEqual
	Inf
	Sup
}

enum EVerticalRelative
{
	BOTTOM
	MIDDLE
	TOP
}

enum EHorizontalRelative
{
	LEFT
	MIDDLE
	RIGHT
}

enum EMouseButton {
	RIGHT
	LEFT
	MIDDLE
	_4
	_5
	_6
	_7
	_8
}

enum EKeyState {
	RELEASED = 0
	PRESSED = 1
	REPEATED = 2
}