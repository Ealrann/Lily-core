@GenModel(modelDirectory="/org.sheepy.lily.core.model/src/generated/java")
@GenModel(editDirectory="/org.sheepy.lily.core.model.edit/src/generated/java")
@GenModel(complianceLevel="11.0", resource="XMI")
@GenModel(extensibleProviderFactory="true")
@GenModel(updateClasspath="false")

package org.sheepy.lily.core.model.variable

import org.eclipse.emf.ecore.EObject
import org.sheepy.lily.core.api.util.FeatureDefinition
import org.sheepy.lily.core.model.action.Action

interface IVariableResolver
{
}

interface IDefinitionContainer
{
	VariableDefinition[1..1] variableDefinition
}

class ChainVariableResolver extends IVariableResolver
{
	contains IVariableResolver[1..1] firstResolver
	contains ChainResolver[1..*] subResolvers
}

class ChainResolver extends IDefinitionContainer
{
}

abstract class AbstractVariableResolver extends IVariableResolver, IDefinitionContainer
{
//	contains ILObjectResolver resolver
//	
//	@GenModel(property="None")
//	transient LResolvedVariableFeature emfAttributes
//	
//	op LResolvedVariableFeature lEMFAttributes()
//	{
//		if(emfAttributes === null && variableDefinition !== null)
//			emfAttributes = new ResolvedVariableFeature(variableDefinition)
//			
//		return emfAttributes
//	}
//	op boolean match(LUnit unit) 
//	{
//		val ResolvedVariableAttribute resolved = lEMFAttributes()
//		
//		if (resolved.eClass.isSuperTypeOf(unit.eClass()))
//		{
//			for (EAttribute att : unit.eClass().getEAllAttributes())
//			{
//				if (att == resolved.attribute)
//				{
//					return true
//				}
//			}
//		}
//		return false
//	}
}

class DirectVariableResolver extends AbstractVariableResolver
{
	refers EObject target
}

type LResolvedVariableFeature wraps FeatureDefinition

type VariableDefinition wraps String

// =====================
// Action
// =====================
abstract class VarChangeAction extends Action 
{
	contains AbstractVariableResolver variableResolver
}

class BooleanChangeAction extends VarChangeAction, Action
{
}

class VarChangeActionPkg {
	contains VarChangeAction[] actions
}

//class IncrementAction extends ParameteredAction<FloatParameter>, VarChangeAction
//{
//	int increment = "1"
//}
//
//class SetString extends ParameteredAction<StringParameter>, VarChangeAction
//{
//}
//
//class SetBoolean extends ParameteredAction<BooleanParameter>, VarChangeAction
//{
//}
//
//class SetNumber extends ParameteredAction<FloatParameter>, VarChangeAction
//{
//}


// =====================
// Inference
// =====================

//class VariableNotificationDef extends ParameteredNotification<Object>{
//}
//
//class PositionNotificationDef extends ParameteredNotification<LPoint>{
//}
//
//class StringNotificationDef extends ParameteredNotification<String>{
//}
//
//class NumberNotificationDef extends ParameteredNotification<Float>{
//}






//class NumberConditionDef extends Condition<Float> {
//	
//	ENumberComparisonType comparisonType
//	
//	op EClassifier getType() {
//		EcorePackage.Literals.EFLOAT
//	}
//	op boolean match(Float compareTo) {
//
//		var boolean res = false
//
//		switch (comparisonType) {
//			case EQUAL:
//				res = (compareTo  == value)
//			case INF:
//				res = (compareTo < value)
//			case INF_OR_EQUAL:
//				res = (compareTo <= value)
//			case SUP:
//				res = (compareTo > value)
//			case SUP_OR_EQUAL:
//				res = (compareTo >= value)
//		}
//
//		return res
//	}
//}