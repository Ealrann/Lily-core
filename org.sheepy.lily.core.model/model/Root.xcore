@GenModel(modelDirectory="/org.sheepy.lily.core.model/src/generated/java")
@GenModel(editDirectory="/org.sheepy.lily.core.model.edit/src/generated/java")
@GenModel(complianceLevel="11.0", resource="XMI")
@GenModel(extensibleProviderFactory="true", childCreationExtenders="true")

package org.sheepy.lily.core.model.root

import java.util.ArrayList
import java.util.Collection
import java.util.List
import org.eclipse.emf.common.util.ECollections
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.util.EContentsEList
import org.sheepy.lily.core.model.action.Action
import org.sheepy.lily.core.model.inference.IInferenceObject
import org.sheepy.lily.core.api.util.LTreeIterator

type LContentList wraps EList<LObject>

interface LObject extends IInferenceObject
{
	@GenModel(property="None")
	transient LContentList contentObjects
	op <T extends LObject> T[] createContainmentEList(EClass targetEClass) {
		var EList<T> res = null
		val List<EStructuralFeature> unitRefs = new ArrayList()

		for (EReference ref : eClass.EAllContainments) {
			if (targetEClass.isSuperTypeOf(ref.EType as EClass)) {
				unitRefs.add(ref)
			}
		}
		if (unitRefs.isEmpty)
			res = ECollections.emptyEList
		else
			res = new EContentsEList<T>(this, unitRefs)
		return res
	}
	op LObject[] lContents() {
		if (contentObjects === null)
			contentObjects = this.<LObject>createContainmentEList(RootPackage.Literals.LOBJECT)

		contentObjects
	}
	op LObject lParent() {
		if (eContainer instanceof LObject)
			eContainer as LObject
	}
	op LTreeIterator lAllContents() {
		new LTreeIterator(this)
	}
}

abstract class XAction extends Action
{
	// Must be overrided
	op void execute(LObject object)
}

type LTreeIterator wraps LTreeIterator
type LCollection wraps Collection<LObject>
